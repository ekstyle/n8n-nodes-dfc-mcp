#!/usr/bin/env node

// –¢–µ—Å—Ç –¥–ª—è CreateDailyTodoOperation
// –°–∏–º—É–ª–∏—Ä—É–µ—Ç n8n-–≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤ API

console.log('üß™ –¢–µ—Å—Ç CreateDailyTodoOperation\n');

// –°–∏–º—É–ª—è—Ü–∏—è n8n $parameter
function createParameterMock(params) {
    return {
        $parameter: params
    };
}

// –°–∏–º—É–ª—è—Ü–∏—è n8n-–≤—ã—Ä–∞–∂–µ–Ω–∏—è {{ ... }}
function evaluateExpression(expression, context) {
    try {
        // –ü—Ä–æ—Å—Ç—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –≤–∏–¥–∞ ={{$parameter["key"]}}
        const simpleMatch = expression.match(/^\{\{\$parameter\["(.+?)"\]\}\}$/);
        if (simpleMatch) {
            const key = simpleMatch[1];
            return context.$parameter[key];
        }
        
        // –°–ª–æ–∂–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è - —É–±–∏—Ä–∞–µ–º {{ }} –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∫ JS
        const code = expression.replace(/^\{\{\s*/, '').replace(/\s*\}\}$/, '');
        
        // –ó–∞–º–µ–Ω—è–µ–º $parameter –Ω–∞ parameter –¥–ª—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ JS
        const jsCode = code.replace(/\$parameter/g, 'parameter');
        
        const func = new Function('parameter', `return ${jsCode}`);
        return func(context.$parameter);
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏ "${expression}":`, error.message);
        return null;
    }
}

// –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
const testCases = [
    {
        name: '–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –∏–∑ —à–∞–±–ª–æ–Ω–∞',
        params: {
            todoTemplateId: '42',
            assignees: '1001,1002',
            date: '2025-09-21',
            weekDays: '0,1,2,3,4,5,6',
            dragons: 3,
            description: '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ –ø–æ —É—Ç—Ä–∞–º',
            image: 321
        }
    },
    {
        name: '–ë—É–¥–Ω–∏ –±–µ–∑ —à–∞–±–ª–æ–Ω–∞',
        params: {
            title: '–£—á—ë–±–∞',
            assignees: '1001',
            date: '2025-09-22',
            weekDays: '0,1,2,3,4',
            dragons: 5
        }
    },
    {
        name: '–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –∑–∞–¥–∞—á–∞',
        params: {
            todoTemplateId: '15',
            assignees: '1003',
            date: '2025-09-25',
            weekDays: '',
            dragons: 10,
            description: '–†–∞–∑–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ'
        }
    },
    {
        name: '–í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏',
        params: {
            title: '–û—Ç–¥—ã—Ö',
            assignees: '1001',
            date: '2025-09-21',
            weekDays: '5,6',
            dragons: 2
        }
    },
    {
        name: '–ü—É—Å—Ç—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã',
        params: {
            assignees: '',
            weekDays: '',
            dragons: 0
        }
    }
];

// –í—ã—Ä–∞–∂–µ–Ω–∏—è –∏–∑ CreateDailyTodoOperation
const expressions = {
    todo_template_id: '={{$parameter["todoTemplateId"]}}',
    title: '={{$parameter["title"]}}',
    date: '={{$parameter["date"]}}',
    week_days: '={{ String($parameter["weekDays"] || "").split(",").map(x => x.trim()).filter(x => x !== "").map(x => +x).filter(x => Number.isInteger(x) && x >= 0 && x <= 6) }}',
    assignees: '={{ Array.isArray($parameter["assignees"]) ? $parameter["assignees"].map(x => +x).filter(Number.isFinite) : String($parameter["assignees"] || "").split(",").map(x => x.trim()).filter(x => x !== "").map(x => +x).filter(Number.isFinite) }}',
    dragons: '={{$parameter["dragons"]}}',
    description: '={{$parameter["description"]}}',
    image: '={{ $parameter["image"] ? $parameter["image"] : null }}'
};

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testCases.forEach((testCase, index) => {
    console.log(`\nüìã –¢–µ—Å—Ç ${index + 1}: ${testCase.name}`);
    console.log('üì• –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', JSON.stringify(testCase.params, null, 2));
    
    const context = createParameterMock(testCase.params);
    const result = {};
    
    console.log('\nüîÑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:');
    Object.entries(expressions).forEach(([key, expr]) => {
        const value = evaluateExpression(expr, context);
        result[key] = value;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        if (key === 'week_days' || key === 'assignees' || key === 'image') {
            console.log(`  ${key}: ${JSON.stringify(testCase.params[key === 'assignees' ? 'assignees' : key === 'week_days' ? 'weekDays' : 'image'])} ‚Üí ${JSON.stringify(value)}`);
        }
    });
    
    console.log('\nüì§ –¢–µ–ª–æ POST-–∑–∞–ø—Ä–æ—Å–∞:');
    console.log(JSON.stringify(result, null, 2));
    
    console.log('\n' + '‚îÄ'.repeat(80));
});

console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!\n');
console.log('üí° –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
console.log('   - week_days –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º —á–∏—Å–µ–ª 0-6');
console.log('   - assignees –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º ID –ø—Ä–æ—Ñ–∏–ª–µ–π');
console.log('   - image: null –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∏–Ω–∞—á–µ —á–∏—Å–ª–æ');
console.log('   - –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –Ω–µ –ø–æ–ø–∞–¥–∞—é—Ç –≤ –∑–∞–ø—Ä–æ—Å\n');
